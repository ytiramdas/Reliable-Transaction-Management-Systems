# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import paxos_pb2 as paxos__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in paxos_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TransactionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessTransaction = channel.unary_unary(
                '/paxos.TransactionService/ProcessTransaction',
                request_serializer=paxos__pb2.TransactionRequest.SerializeToString,
                response_deserializer=paxos__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.CrossShardPrepare = channel.unary_unary(
                '/paxos.TransactionService/CrossShardPrepare',
                request_serializer=paxos__pb2.CrossShardPrepareRequest.SerializeToString,
                response_deserializer=paxos__pb2.CrossShardPrepareResponse.FromString,
                _registered_method=True)
        self.CrossShardCommit = channel.unary_unary(
                '/paxos.TransactionService/CrossShardCommit',
                request_serializer=paxos__pb2.CrossShardCommitRequest.SerializeToString,
                response_deserializer=paxos__pb2.CrossShardCommitResponse.FromString,
                _registered_method=True)
        self.SetActiveStatus = channel.unary_unary(
                '/paxos.TransactionService/SetActiveStatus',
                request_serializer=paxos__pb2.SetActiveStatusRequest.SerializeToString,
                response_deserializer=paxos__pb2.SetActiveStatusResponse.FromString,
                _registered_method=True)
        self.SetContactStatus = channel.unary_unary(
                '/paxos.TransactionService/SetContactStatus',
                request_serializer=paxos__pb2.SetContactStatusRequest.SerializeToString,
                response_deserializer=paxos__pb2.SetContactStatusResponse.FromString,
                _registered_method=True)
        self.Prepare = channel.unary_unary(
                '/paxos.TransactionService/Prepare',
                request_serializer=paxos__pb2.PrepareMessage.SerializeToString,
                response_deserializer=paxos__pb2.PromiseMessage.FromString,
                _registered_method=True)
        self.Accept = channel.unary_unary(
                '/paxos.TransactionService/Accept',
                request_serializer=paxos__pb2.AcceptMessage.SerializeToString,
                response_deserializer=paxos__pb2.AcceptedResponse.FromString,
                _registered_method=True)
        self.Commit = channel.unary_unary(
                '/paxos.TransactionService/Commit',
                request_serializer=paxos__pb2.CommitMessage.SerializeToString,
                response_deserializer=paxos__pb2.CommitResponse.FromString,
                _registered_method=True)
        self.Abort = channel.unary_unary(
                '/paxos.TransactionService/Abort',
                request_serializer=paxos__pb2.AbortMessage.SerializeToString,
                response_deserializer=paxos__pb2.AbortResponse.FromString,
                _registered_method=True)
        self.GetBalance = channel.unary_unary(
                '/paxos.TransactionService/GetBalance',
                request_serializer=paxos__pb2.BalanceRequest.SerializeToString,
                response_deserializer=paxos__pb2.BalanceResponse.FromString,
                _registered_method=True)
        self.GetDatastore = channel.unary_unary(
                '/paxos.TransactionService/GetDatastore',
                request_serializer=paxos__pb2.DatastoreRequest.SerializeToString,
                response_deserializer=paxos__pb2.DatastoreResponse.FromString,
                _registered_method=True)


class TransactionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ProcessTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CrossShardPrepare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CrossShardCommit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetActiveStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetContactStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Prepare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Accept(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Commit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Abort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDatastore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TransactionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessTransaction,
                    request_deserializer=paxos__pb2.TransactionRequest.FromString,
                    response_serializer=paxos__pb2.TransactionResponse.SerializeToString,
            ),
            'CrossShardPrepare': grpc.unary_unary_rpc_method_handler(
                    servicer.CrossShardPrepare,
                    request_deserializer=paxos__pb2.CrossShardPrepareRequest.FromString,
                    response_serializer=paxos__pb2.CrossShardPrepareResponse.SerializeToString,
            ),
            'CrossShardCommit': grpc.unary_unary_rpc_method_handler(
                    servicer.CrossShardCommit,
                    request_deserializer=paxos__pb2.CrossShardCommitRequest.FromString,
                    response_serializer=paxos__pb2.CrossShardCommitResponse.SerializeToString,
            ),
            'SetActiveStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SetActiveStatus,
                    request_deserializer=paxos__pb2.SetActiveStatusRequest.FromString,
                    response_serializer=paxos__pb2.SetActiveStatusResponse.SerializeToString,
            ),
            'SetContactStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SetContactStatus,
                    request_deserializer=paxos__pb2.SetContactStatusRequest.FromString,
                    response_serializer=paxos__pb2.SetContactStatusResponse.SerializeToString,
            ),
            'Prepare': grpc.unary_unary_rpc_method_handler(
                    servicer.Prepare,
                    request_deserializer=paxos__pb2.PrepareMessage.FromString,
                    response_serializer=paxos__pb2.PromiseMessage.SerializeToString,
            ),
            'Accept': grpc.unary_unary_rpc_method_handler(
                    servicer.Accept,
                    request_deserializer=paxos__pb2.AcceptMessage.FromString,
                    response_serializer=paxos__pb2.AcceptedResponse.SerializeToString,
            ),
            'Commit': grpc.unary_unary_rpc_method_handler(
                    servicer.Commit,
                    request_deserializer=paxos__pb2.CommitMessage.FromString,
                    response_serializer=paxos__pb2.CommitResponse.SerializeToString,
            ),
            'Abort': grpc.unary_unary_rpc_method_handler(
                    servicer.Abort,
                    request_deserializer=paxos__pb2.AbortMessage.FromString,
                    response_serializer=paxos__pb2.AbortResponse.SerializeToString,
            ),
            'GetBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBalance,
                    request_deserializer=paxos__pb2.BalanceRequest.FromString,
                    response_serializer=paxos__pb2.BalanceResponse.SerializeToString,
            ),
            'GetDatastore': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDatastore,
                    request_deserializer=paxos__pb2.DatastoreRequest.FromString,
                    response_serializer=paxos__pb2.DatastoreResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'paxos.TransactionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('paxos.TransactionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TransactionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ProcessTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/paxos.TransactionService/ProcessTransaction',
            paxos__pb2.TransactionRequest.SerializeToString,
            paxos__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CrossShardPrepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/paxos.TransactionService/CrossShardPrepare',
            paxos__pb2.CrossShardPrepareRequest.SerializeToString,
            paxos__pb2.CrossShardPrepareResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CrossShardCommit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/paxos.TransactionService/CrossShardCommit',
            paxos__pb2.CrossShardCommitRequest.SerializeToString,
            paxos__pb2.CrossShardCommitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetActiveStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/paxos.TransactionService/SetActiveStatus',
            paxos__pb2.SetActiveStatusRequest.SerializeToString,
            paxos__pb2.SetActiveStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetContactStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/paxos.TransactionService/SetContactStatus',
            paxos__pb2.SetContactStatusRequest.SerializeToString,
            paxos__pb2.SetContactStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Prepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/paxos.TransactionService/Prepare',
            paxos__pb2.PrepareMessage.SerializeToString,
            paxos__pb2.PromiseMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Accept(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/paxos.TransactionService/Accept',
            paxos__pb2.AcceptMessage.SerializeToString,
            paxos__pb2.AcceptedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Commit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/paxos.TransactionService/Commit',
            paxos__pb2.CommitMessage.SerializeToString,
            paxos__pb2.CommitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Abort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/paxos.TransactionService/Abort',
            paxos__pb2.AbortMessage.SerializeToString,
            paxos__pb2.AbortResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/paxos.TransactionService/GetBalance',
            paxos__pb2.BalanceRequest.SerializeToString,
            paxos__pb2.BalanceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDatastore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/paxos.TransactionService/GetDatastore',
            paxos__pb2.DatastoreRequest.SerializeToString,
            paxos__pb2.DatastoreResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
